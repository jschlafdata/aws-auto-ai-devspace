app:
  mode: dashboard
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
  scheduling:
    nodeSelector: {}
  security:
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 1001
      runAsGroup: 2001
      capabilities:
        drop:
        - ALL
    podDisruptionBudget:
      enabled: false
      minAvailable: 0
      maxUnavailable: 0
    networkPolicy:
      enabled: false
      ingressDenyAll: false
  labels: {}
  annotations: {}
  settings:
    global: null
    pinnedResources: []
  ingress:
    enabled: true
    useDefaultIngressClass: false
    useDefaultAnnotations: false
    pathType: ImplementationSpecific
    ingressClassName: nginx-internal
    annotations:
      external-dns.alpha.kubernetes.io/hostname: k8s-dashboard.schlafdata.cloud
      nginx.ingress.kubernetes.io/proxy-buffer-size: 256k
      nginx.ingress.kubernetes.io/proxy-buffering: 'on'
      nginx.ingress.kubernetes.io/proxy-buffers-number: '4'
      nginx.ingress.kubernetes.io/proxy-max-temp-file-size: 1024m
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-passthrough: 'true'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    labels:
      app.kubernetes.io/instance: k8s-dashboard
      app.kubernetes.io/name: k8s-dashboard
    hosts:
    - k8s-dashboard.schlafdata.cloud
    path: /
    tls:
      secretName: wildcard-tls-cert-schlafdata-cloud
  tolerations: []
  affinity: {}
auth:
  role: auth
  image:
    repository: docker.io/kubernetesui/dashboard-auth
    tag: 1.1.1
  scaling:
    replicas: 1
    revisionHistoryLimit: 10
  containers:
    ports:
    - name: auth
      containerPort: 8000
      protocol: TCP
    args: []
    env: []
    volumeMounts:
    - mountPath: /tmp
      name: tmp-volume
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
  volumes:
  - name: tmp-volume
    emptyDir: {}
  nodeSelector: {}
  labels: {}
  annotations: {}
api:
  role: api
  image:
    repository: docker.io/kubernetesui/dashboard-api
    tag: 1.3.0
  scaling:
    replicas: 3
    revisionHistoryLimit: 10
  containers:
    ports:
    - name: api
      containerPort: 8000
      protocol: TCP
    args: []
    env: []
    volumeMounts:
    - mountPath: /tmp
      name: tmp-volume
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
  volumes:
  - name: tmp-volume
    emptyDir: {}
  nodeSelector: {}
  labels: {}
  annotations: {}
web:
  role: web
  image:
    repository: docker.io/kubernetesui/dashboard-web
    tag: 1.2.2
  scaling:
    replicas: 1
    revisionHistoryLimit: 10
  containers:
    ports:
    - name: web
      containerPort: 8000
      protocol: TCP
    args: []
    env: []
    volumeMounts:
    - mountPath: /tmp
      name: tmp-volume
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
  volumes:
  - name: tmp-volume
    emptyDir: {}
  nodeSelector: {}
  labels: {}
  annotations: {}
metricsScraper:
  enabled: true
  role: metrics-scraper
  image:
    repository: docker.io/kubernetesui/dashboard-metrics-scraper
    tag: 1.1.1
  scaling:
    replicas: 1
    revisionHistoryLimit: 10
  containers:
    ports:
    - containerPort: 8000
      protocol: TCP
    args: []
    env: []
    volumeMounts:
    - mountPath: /tmp
      name: tmp-volume
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
    livenessProbe:
      httpGet:
        scheme: HTTP
        path: /
        port: 8000
      initialDelaySeconds: 30
      timeoutSeconds: 30
  volumes:
  - name: tmp-volume
    emptyDir: {}
  nodeSelector: {}
  labels: {}
  annotations: {}
metrics-server:
  enabled: false
  args:
  - --kubelet-preferred-address-types=InternalIP
  - --kubelet-insecure-tls
kong:
  enabled: true
  env:
    dns_order: LAST,A,SRV,CNAME
  ingressController:
    enabled: false
  dblessConfig:
    configMap: kong-dbless-config
  proxy:
    type: ClusterIP
    http:
      enabled: false
cert-manager:
  enabled: false
  installCRDs: true
nginx:
  enabled: false
extras:
  manifests: []
  serviceMonitor:
    enabled: false
    labels: {}
    annotations: {}
    metricRelabelings: []
    relabelings: []
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
