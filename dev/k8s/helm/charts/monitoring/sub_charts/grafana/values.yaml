global:
  imageRegistry: null
  imagePullSecrets: []
rbac:
  create: true
  pspEnabled: false
  pspUseAppArmor: false
  namespaced: false
  extraRoleRules: []
  extraClusterRoleRules: []
serviceAccount:
  create: true
  name: null
  nameTest: null
  labels: {}
  automountServiceAccountToken: true
replicas: 1
headlessService: false
automountServiceAccountToken: true
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPU: '60'
  targetMemory: ''
  behavior: {}
podDisruptionBudget: {}
deploymentStrategy:
  type: RollingUpdate
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10
image:
  registry: docker.io
  repository: grafana/grafana
  tag: ''
  sha: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
testFramework:
  enabled: true
  image:
    registry: docker.io
    repository: bats/bats
    tag: v1.4.1
  imagePullPolicy: IfNotPresent
  securityContext: {}
dnsPolicy: null
dnsConfig: {}
securityContext:
  runAsNonRoot: true
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault
createConfigmap: true
extraConfigmapMounts: []
extraEmptyDirMounts: []
extraLabels: {}
downloadDashboardsImage:
  registry: docker.io
  repository: curlimages/curl
  tag: 7.85.0
  sha: ''
  pullPolicy: IfNotPresent
downloadDashboards:
  env: {}
  envFromSecret: ''
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  envValueFrom: {}
podPortName: grafana
gossipPortName: gossip
service:
  enabled: true
  type: ClusterIP
  loadBalancerIP: ''
  loadBalancerClass: ''
  loadBalancerSourceRanges: []
  port: 80
  targetPort: 3000
  annotations: {}
  labels: {}
  portName: service
  appProtocol: ''
serviceMonitor:
  enabled: false
  path: /metrics
  labels: {}
  interval: 30s
  scheme: http
  tlsConfig: {}
  scrapeTimeout: 30s
  relabelings: []
  metricRelabelings: []
  targetLabels: []
extraExposePorts: []
hostAliases: []
ingress:
  enabled: true
  ingressClassName: nginx-internal
  annotations:
    external-dns.alpha.kubernetes.io/hostname: grafana.schlafdata.cloud
    nginx.ingress.kubernetes.io/proxy-buffer-size: 256k
    nginx.ingress.kubernetes.io/proxy-buffering: 'on'
    nginx.ingress.kubernetes.io/proxy-buffers-number: '4'
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: 1024m
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
  hosts:
  - grafana.schlafdata.cloud
  path: /
  tls:
  - secretName: wildcard-tls-cert-schlafdata-cloud
    hosts:
    - grafana.schlafdata.cloud
resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []
extraInitContainers: []
extraContainers: ''
extraContainerVolumes: []
persistence:
  type: pvc
  enabled: false
  accessModes:
  - ReadWriteOnce
  size: 10Gi
  finalizers:
  - kubernetes.io/pvc-protection
  extraPvcLabels: {}
  inMemory:
    enabled: false
initChownData:
  enabled: true
  image:
    registry: docker.io
    repository: library/busybox
    tag: 1.31.1
    sha: ''
    pullPolicy: IfNotPresent
  resources: {}
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      add:
      - CHOWN
adminUser: admin
admin:
  existingSecret: ''
  userKey: admin-user
  passwordKey: admin-password
env: {}
envValueFrom: {}
envFromSecret: ''
envRenderSecret: {}
envFromSecrets: []
envFromConfigMaps: []
enableServiceLinks: true
extraSecretMounts: []
extraVolumeMounts: []
extraVolumes: []
lifecycleHooks: {}
plugins: []
datasources: {}
alerting: {}
notifiers: {}
dashboardProviders: {}
dashboards: {}
dashboardsConfigMaps: {}
grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  server:
    domain: grafana.schlafdata.cloud
sidecar:
  image:
    registry: quay.io
    repository: kiwigrid/k8s-sidecar
    tag: 1.26.1
    sha: ''
  imagePullPolicy: IfNotPresent
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  alerts:
    enabled: false
  dashboards:
    enabled: true
    label: grafana_dashboard
    labelValue: 1
    searchNamespace: ALL
    enableNewTablePanelSyntax: false
    annotations: {}
    multicluster:
      global:
        enabled: false
      etcd:
        enabled: false
    provider:
      allowUiUpdates: false
  datasources:
    enabled: true
    defaultDatasourceEnabled: true
    isDefaultDatasource: true
    uid: prometheus
    annotations: {}
    httpMethod: POST
    createPrometheusReplicasDatasources: false
    label: grafana_datasource
    labelValue: 1
    exemplarTraceIdDestinations: {}
    alertmanager:
      enabled: false
    provider:
      name: sidecarProvider
      orgid: 1
      folder: ''
      type: file
      disableDelete: false
      allowUiUpdates: false
      foldersFromFilesStructure: false
    extraMounts: []
    sizeLimit: {}
  plugins:
    enabled: false
    env: {}
    label: grafana_plugin
    labelValue: ''
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    reloadURL: http://localhost:3000/api/admin/provisioning/plugins/reload
    script: null
    skipReload: false
    initPlugins: false
    sizeLimit: {}
  notifiers:
    enabled: false
    env: {}
    label: grafana_notifier
    labelValue: ''
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    reloadURL: http://localhost:3000/api/admin/provisioning/notifications/reload
    script: null
    skipReload: false
    initNotifiers: false
    sizeLimit: {}
namespaceOverride: ''
revisionHistoryLimit: 10
imageRenderer:
  deploymentStrategy: {}
  enabled: false
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: 60
    targetMemory: ''
    behavior: {}
  image:
    registry: docker.io
    repository: grafana/grafana-image-renderer
    tag: latest
    sha: ''
    pullPolicy: Always
  env:
    HTTP_HOST: 0.0.0.0
  envValueFrom: {}
  serviceAccountName: ''
  securityContext: {}
  containerSecurityContext:
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
      - ALL
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  podAnnotations: {}
  hostAliases: []
  priorityClassName: ''
  service:
    enabled: true
    portName: http-web
    port: 8081
    targetPort: 8081
    appProtocol: ''
  serviceMonitor:
    enabled: true
    path: /metrics
    labels: {}
    interval: 1m
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s
    relabelings: []
    targetLabels: []
  grafanaProtocol: http
  grafanaSubPath: null
  podPortName: http
  revisionHistoryLimit: 10
  networkPolicy:
    limitIngress: true
    limitEgress: false
    extraIngressSelectors: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
networkPolicy:
  enabled: false
  ingress: true
  allowExternal: true
  explicitNamespacesSelector: {}
  egress:
    enabled: false
    blockDNSResolution: false
    ports: []
    to: []
enableKubeBackwardCompatibility: false
useStatefulSet: false
extraObjects: []
assertNoLeakedSecrets: true
